import com.twidere.twiderex.model.MicroBlogKey;

CREATE TABLE IF NOT EXISTS DbPagingTimeline (
    accountKey TEXT AS MicroBlogKey NOT NULL,
    pagingKey TEXT NOT NULL,
    statusKey TEXT AS MicroBlogKey NOT NULL,
    orderKey INTEGER NOT NULL
);
CREATE UNIQUE INDEX IF NOT EXISTS index_accountKey_statusKey_pagingKey ON DbPagingTimeline (accountKey, statusKey, pagingKey);

CREATE VIEW IF NOT EXISTS GetTimelineWithStatus AS
SELECT
timeline.*,
status.content AS statusContent,
reactions.retweeted AS reactionsRetweeted,
reactions.liked AS reactionsLiked,
reactions.bookmarked AS reactionsBookmarked
FROM DbPagingTimeline timeline
JOIN DbStatus status ON timeline.statusKey = status.statusKey
LEFT JOIN DbStatusReactions reactions ON status.displayStatusKey == reactions.statusKey AND timeline.accountKey == reactions.accountKey;


insert:
INSERT OR REPLACE INTO DbPagingTimeline(
    accountKey, pagingKey, statusKey, orderKey
) VALUES ?;

getPagingList:
SELECT * FROM DbPagingTimeline WHERE accountKey == :accountKey AND pagingKey ==:pagingKey ORDER BY orderKey DESC LIMIT :limit OFFSET :offset;

getPagingCount:
SELECT COUNT(*) FROM DbPagingTimeline WHERE accountKey == :accountKey AND pagingKey ==:pagingKey;

findWithStatusKey:
SELECT * FROM DbPagingTimeline WHERE accountKey == :accountKey AND statusKey ==:statusKey;

getLatest:
SELECT * FROM DbPagingTimeline WHERE accountKey == :accountKey AND pagingKey == :pagingKey ORDER BY orderKey DESC LIMIT 1;

delete:
DELETE FROM DbPagingTimeline WHERE statusKey ==:statusKey;

clearAll:
DELETE FROM DbPagingTimeline WHERE accountKey == :accountKey AND pagingKey ==:pagingKey;
